import groovy.text.SimpleTemplateEngine

import java.util.concurrent.TimeUnit

plugins {
    id 'java'
}

version '1.0-SNAPSHOT'

repositories {
    jcenter()
}

dependencies {
    implementation project(':keepup-core')
}

def newVersion = project.version

if (hasProperty('newVersion')) {
    newVersion = getProperty('newVersion')
    buildDir = file("build/${newVersion}")

}

def image = "${buildDir}/image"
def mods = "${buildDir}/mods"

task deps {
    dependsOn jar
    doLast {
        copy {
            from configurations.runtimeClasspath
            from jar
            into mods
        }
    }
}

task generateJavaSources { task ->
    compileJava.dependsOn task
    doLast {
        def template = file('src/main/Version.java.template')
        def generated = new SimpleTemplateEngine().createTemplate(template).make([VERSION: newVersion])
        file('src/main/java/keepup/examples/simple/Version.java').withWriter { w ->
            generated.writeTo(w)
        }
    }
}

task jlink(type: Exec) {
    dependsOn deps
    inputs.files(sourceSets*.allSource)
    outputs.dir(image)
    def options = [
            '--module-path', mods,
            '--vm=server', // options: client|server|minimal|all
            '--add-modules', 'com.athaydes.keepup.core,keepup.examples.simple',
            '--output', image,
            '--launcher', 'simple_app=keepup.examples.simple/keepup.examples.simple.SimpleApp',
            '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    def jlink = System.getProperty('java.home') + '/bin/jlink'
    commandLine([jlink] + options)
    doFirst { new File(image).deleteDir() }
}

task packageImage(type: Zip) {
    dependsOn jlink
    from image
    into "simple-app"
    include '**/*'
    archiveName "simple-app.zip"
    destinationDir file('build')
}

task buildVersion1(type: Exec) {
    workingDir rootDir
    commandLine './gradlew', ':examples:simple-example:jlink'
}

task buildVersion2(type: Exec) {
    workingDir rootDir
    commandLine './gradlew', ':examples:simple-example:packageImage', '-PnewVersion=2.0'
}

task testWithoutUpdate {
    dependsOn jlink
    def launcher = "$buildDir/image/bin/simple_app"
    def logFile = file("build/app.log")
    doFirst {
        logFile.delete()
    }
    doLast {
        def proc = launcher.execute(null, projectDir)
        def ok = proc.waitFor(5, TimeUnit.SECONDS)
        if (!ok) {
            proc.destroyForcibly()
            assert ok: 'Process did not terminate within timeout'
        }
        assert proc.exitValue() == 0
        assert logFile.text ==
                'SimpleApp version 1.0-SNAPSHOT\n' +
                'No updates at this time\n'
    }
}

task testCanUpdate {
    dependsOn buildVersion1, buildVersion2
    def launcher = "$buildDir/image/bin/simple_app"
    def logFile = file("build/app.log")
    doFirst {
        logFile.delete()
    }
    doLast {
        def proc = launcher.execute(null, projectDir)
        def ok = proc.waitFor(5, TimeUnit.SECONDS)
        if (!ok) {
            proc.destroyForcibly()
            assert ok: 'Process did not terminate within timeout'
        }
        assert proc.exitValue() == 0

        def outputIsExpected = false
        def tries = 5
        while (!outputIsExpected && tries > 0) {
            outputIsExpected = logFile.text ==
                    'SimpleApp version 1.0-SNAPSHOT\n' +
                    'Updating to version v2\n' +
                    'SimpleApp version 2.0\n' +
                    'No updates at this time\n'
            tries--
            sleep 500
        }
        assert tries > 0: 'Log file is not as expected: ' + logFile.text
    }
}

task testUpdate {
    dependsOn testWithoutUpdate, testCanUpdate
}
