import groovy.text.SimpleTemplateEngine
import tests.KeepupTester

import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS
import static org.apache.tools.ant.taskdefs.condition.Os.isFamily

plugins {
    id 'java'
}

version '1.0-SNAPSHOT'

repositories {
    jcenter()
}

dependencies {
    implementation project(':keepup-core')
}

def newVersion = project.version

if (hasProperty('newVersion')) {
    newVersion = getProperty('newVersion')
    buildDir = file("build/${newVersion}")

}

def image = "${buildDir}/image"
def mods = "${buildDir}/mods"

task deps {
    dependsOn jar
    doLast {
        copy {
            from configurations.runtimeClasspath
            from jar
            into mods
        }
    }
}

task generateJavaSources { task ->
    compileJava.dependsOn task
    doLast {
        def template = file('src/main/Version.java.template')
        def generated = new SimpleTemplateEngine().createTemplate(template).make([VERSION: newVersion])
        file('src/main/java/keepup/examples/simple/Version.java').withWriter { w ->
            generated.writeTo(w)
        }
    }
}

task jlink(type: Exec) {
    dependsOn deps
    inputs.dir('src')
    outputs.dir(image)
    def options = [
            '--module-path', mods,
            '--vm=server', // options: client|server|minimal|all
            '--add-modules', 'com.athaydes.keepup.core,keepup.examples.simple',
            '--output', image,
            '--launcher', 'simple_app=keepup.examples.simple/keepup.examples.simple.SimpleApp',
            '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    def jlink = System.getProperty('java.home') + '/bin/jlink'
    commandLine([jlink] + options)
    doFirst { new File(image).deleteDir() }
}

def packagedImage = file('build/simple-app.image.zip')
def downloadFile = file('build/simple-app.zip')

task packageImage(type: Zip) {
    dependsOn jlink
    from image
    into "simple-app"
    include '**/*'
    archiveName packagedImage.name
    destinationDir packagedImage.parentFile
}

def gradlew = isFamily(FAMILY_WINDOWS) ? 'gradlew.bat' : './gradlew'

task buildVersion2(type: Exec) {
    workingDir rootDir
    commandLine gradlew, ':examples:simple-example:packageImage', '-PnewVersion=2.0'
}

def tester = new KeepupTester(project, 'simple_app', packagedImage, downloadFile)

task testWithoutUpdate {
    dependsOn packageImage
    doFirst {
        tester.reset()
    }
    doLast {
        tester.exec()
        tester.verifyProcessExitCode(0)
        tester.verifyOutputIs('')
        tester.verifyErrorIs('')
        tester.verifyAppLogIs(
                '''|SimpleApp version 1.0-SNAPSHOT
                   |No updates at this time
                   |'''.stripMargin())
    }
}

task testCanUpdate {
    dependsOn packageImage, buildVersion2
    mustRunAfter testWithoutUpdate
    doFirst {
        tester.reset()
        tester.makeUpdateAvailable()
    }
    doLast {
        tester.exec()
        tester.verifyProcessExitCode(0)
        tester.verifyOutputIs('')
        tester.verifyErrorIs('')
        tester.verifyAppLogIs(
                '''|SimpleApp version 1.0-SNAPSHOT
                   |Updating to version v2
                   |SimpleApp version 2.0
                   |No updates at this time
                   |'''.stripMargin())
    }
}

task testUpdate { task ->
    check.dependsOn task
    dependsOn testWithoutUpdate, testCanUpdate
}
